# This file was generated. Do not edit manually.

schema {
    query: Query
}

type Query {
    article(filter: article_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [article!]!
    article_aggregated(filter: article_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [article_aggregated!]!
    article_article_tags(filter: article_article_tags_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [article_article_tags!]!
    article_article_tags_aggregated(filter: article_article_tags_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [article_article_tags_aggregated!]!
    article_article_tags_by_id(id: ID!): article_article_tags
    article_by_id(id: ID!): article
    article_tags(filter: article_tags_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [article_tags!]!
    article_tags_aggregated(filter: article_tags_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [article_tags_aggregated!]!
    article_tags_by_id(id: ID!): article_tags
    blog_page: blog_page
    blog_page_files(filter: blog_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [blog_page_files!]!
    blog_page_files_aggregated(filter: blog_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [blog_page_files_aggregated!]!
    blog_page_files_by_id(id: ID!): blog_page_files
    empresa_junior_page: empresa_junior_page
    empresa_junior_page_files(filter: empresa_junior_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [empresa_junior_page_files!]!
    empresa_junior_page_files_aggregated(filter: empresa_junior_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [empresa_junior_page_files_aggregated!]!
    empresa_junior_page_files_by_id(id: ID!): empresa_junior_page_files
    game(filter: game_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [game!]!
    game_aggregated(filter: game_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [game_aggregated!]!
    game_by_id(id: ID!): game
    game_student(filter: game_student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [game_student!]!
    game_student_aggregated(filter: game_student_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [game_student_aggregated!]!
    game_student_by_id(id: ID!): game_student
    games_page: games_page
    games_page_files(filter: games_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [games_page_files!]!
    games_page_files_aggregated(filter: games_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [games_page_files_aggregated!]!
    games_page_files_by_id(id: ID!): games_page_files
    gecomp_page: gecomp_page
    gecomp_page_files(filter: gecomp_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gecomp_page_files!]!
    gecomp_page_files_aggregated(filter: gecomp_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [gecomp_page_files_aggregated!]!
    gecomp_page_files_by_id(id: ID!): gecomp_page_files
    gecomp_page_professor(filter: gecomp_page_professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gecomp_page_professor!]!
    gecomp_page_professor_aggregated(filter: gecomp_page_professor_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [gecomp_page_professor_aggregated!]!
    gecomp_page_professor_by_id(id: ID!): gecomp_page_professor
    home_page: home_page
    home_page_files(filter: home_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [home_page_files!]!
    home_page_files_aggregated(filter: home_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [home_page_files_aggregated!]!
    home_page_files_by_id(id: ID!): home_page_files
    link(filter: link_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [link!]!
    link_aggregated(filter: link_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [link_aggregated!]!
    link_by_id(id: ID!): link
    news(filter: news_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [news!]!
    news_aggregated(filter: news_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [news_aggregated!]!
    news_by_id(id: ID!): news
    professor(filter: professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [professor!]!
    professor_aggregated(filter: professor_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [professor_aggregated!]!
    professor_by_id(id: ID!): professor
    professores_page: professores_page
    professores_page_files(filter: professores_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [professores_page_files!]!
    professores_page_files_aggregated(filter: professores_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [professores_page_files_aggregated!]!
    professores_page_files_by_id(id: ID!): professores_page_files
    project(filter: project_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [project!]!
    project_aggregated(filter: project_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [project_aggregated!]!
    project_by_id(id: ID!): project
    project_professor(filter: project_professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [project_professor!]!
    project_professor_aggregated(filter: project_professor_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [project_professor_aggregated!]!
    project_professor_by_id(id: ID!): project_professor
    project_student(filter: project_student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [project_student!]!
    project_student_aggregated(filter: project_student_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [project_student_aggregated!]!
    project_student_by_id(id: ID!): project_student
    projetos_page: projetos_page
    projetos_page_files(filter: projetos_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [projetos_page_files!]!
    projetos_page_files_aggregated(filter: projetos_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [projetos_page_files_aggregated!]!
    projetos_page_files_by_id(id: ID!): projetos_page_files
    student(filter: student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [student!]!
    student_aggregated(filter: student_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [student_aggregated!]!
    student_by_id(id: ID!): student
    student_directus_users(filter: student_directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [student_directus_users!]!
    student_directus_users_aggregated(filter: student_directus_users_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [student_directus_users_aggregated!]!
    student_directus_users_by_id(id: ID!): student_directus_users
    tecnico_integrado_page: tecnico_integrado_page
    tecnico_integrado_page_files(filter: tecnico_integrado_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tecnico_integrado_page_files!]!
    tecnico_integrado_page_files_aggregated(filter: tecnico_integrado_page_files_filter, groupBy: [String], limit: Int, search: String, sort: [String]): [tecnico_integrado_page_files_aggregated!]!
    tecnico_integrado_page_files_by_id(id: ID!): tecnico_integrado_page_files
}

type article {
    content: String
    cover(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    description: String
    id: ID
    sort: Int
    status: String!
    tags(filter: article_article_tags_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [article_article_tags]
    tags_func: count_functions
    title: String
    user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
    user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type article_aggregated {
    avg: article_aggregated_fields
    avgDistinct: article_aggregated_fields
    count: article_aggregated_count
    countAll: Int
    countDistinct: article_aggregated_count
    group: JSON
    max: article_aggregated_fields
    min: article_aggregated_fields
    sum: article_aggregated_fields
    sumDistinct: article_aggregated_fields
}

type article_aggregated_count {
    content: Int
    cover: Int
    date_created: Int
    date_updated: Int
    description: Int
    id: Int
    sort: Int
    status: Int
    tags: Int
    title: Int
    user_created: Int
    user_updated: Int
}

type article_aggregated_fields {
    id: Float
    sort: Float
}

type article_article_tags {
    article_id(filter: article_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): article
    article_tags_id(filter: article_tags_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): article_tags
    id: ID
}

type article_article_tags_aggregated {
    avg: article_article_tags_aggregated_fields
    avgDistinct: article_article_tags_aggregated_fields
    count: article_article_tags_aggregated_count
    countAll: Int
    countDistinct: article_article_tags_aggregated_count
    group: JSON
    max: article_article_tags_aggregated_fields
    min: article_article_tags_aggregated_fields
    sum: article_article_tags_aggregated_fields
    sumDistinct: article_article_tags_aggregated_fields
}

type article_article_tags_aggregated_count {
    article_id: Int
    article_tags_id: Int
    id: Int
}

type article_article_tags_aggregated_fields {
    article_id: Float
    article_tags_id: Float
    id: Float
}

type article_tags {
    id: ID
    name: String
}

type article_tags_aggregated {
    avg: article_tags_aggregated_fields
    avgDistinct: article_tags_aggregated_fields
    count: article_tags_aggregated_count
    countAll: Int
    countDistinct: article_tags_aggregated_count
    group: JSON
    max: article_tags_aggregated_fields
    min: article_tags_aggregated_fields
    sum: article_tags_aggregated_fields
    sumDistinct: article_tags_aggregated_fields
}

type article_tags_aggregated_count {
    id: Int
    name: Int
}

type article_tags_aggregated_fields {
    id: Float
}

type blog_page {
    hero_carousel(filter: blog_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [blog_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type blog_page_files {
    blog_page_id(filter: blog_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): blog_page
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    id: ID
}

type blog_page_files_aggregated {
    avg: blog_page_files_aggregated_fields
    avgDistinct: blog_page_files_aggregated_fields
    count: blog_page_files_aggregated_count
    countAll: Int
    countDistinct: blog_page_files_aggregated_count
    group: JSON
    max: blog_page_files_aggregated_fields
    min: blog_page_files_aggregated_fields
    sum: blog_page_files_aggregated_fields
    sumDistinct: blog_page_files_aggregated_fields
}

type blog_page_files_aggregated_count {
    blog_page_id: Int
    directus_files_id: Int
    id: Int
}

type blog_page_files_aggregated_fields {
    blog_page_id: Float
    id: Float
}

type count_functions {
    count: Int
}

type datetime_functions {
    day: Int
    hour: Int
    minute: Int
    month: Int
    second: Int
    week: Int
    weekday: Int
    year: Int
}

type directus_files {
    charset: String
    description: String
    duration: Int
    embed: String
    filename_disk: String
    filename_download: String!
    filesize: String
    folder(filter: directus_folders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_folders
    height: Int
    id: ID
    location: String
    metadata: JSON
    metadata_func: count_functions
    modified_by(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
    modified_on: Date!
    modified_on_func: datetime_functions
    storage: String!
    tags: JSON
    tags_func: count_functions
    title: String
    type: String
    uploaded_by(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
    uploaded_on: Date!
    uploaded_on_func: datetime_functions
    width: Int
}

type directus_folders {
    id: ID
    name: String!
    parent(filter: directus_folders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_folders
}

type directus_users {
    auth_data: JSON
    auth_data_func: count_functions
    avatar(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    description: String
    email: String
    email_notifications: Boolean
    external_identifier: String
    first_name: String
    id: ID
    language: String
    last_access: Date
    last_access_func: datetime_functions
    last_name: String
    last_page: String
    lattes: String
    location: String
    password: Hash
    provider: String!
    role: String
    status: String!
    tags: JSON
    tags_func: count_functions
    tfa_secret: Hash
    theme: String
    title: String
    token: Hash
}

type empresa_junior_page {
    hero_carousel(filter: empresa_junior_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [empresa_junior_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type empresa_junior_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    empresa_junior_page_id(filter: empresa_junior_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): empresa_junior_page
    id: ID
}

type empresa_junior_page_files_aggregated {
    avg: empresa_junior_page_files_aggregated_fields
    avgDistinct: empresa_junior_page_files_aggregated_fields
    count: empresa_junior_page_files_aggregated_count
    countAll: Int
    countDistinct: empresa_junior_page_files_aggregated_count
    group: JSON
    max: empresa_junior_page_files_aggregated_fields
    min: empresa_junior_page_files_aggregated_fields
    sum: empresa_junior_page_files_aggregated_fields
    sumDistinct: empresa_junior_page_files_aggregated_fields
}

type empresa_junior_page_files_aggregated_count {
    directus_files_id: Int
    empresa_junior_page_id: Int
    id: Int
}

type empresa_junior_page_files_aggregated_fields {
    empresa_junior_page_id: Float
    id: Float
}

type game {
    authors: [String]
    description: String
    id: ID
    status: String!
    students(filter: game_student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [game_student]
    students_func: count_functions
    title: String
    video_url: String
    year: Int
}

type game_aggregated {
    avg: game_aggregated_fields
    avgDistinct: game_aggregated_fields
    count: game_aggregated_count
    countAll: Int
    countDistinct: game_aggregated_count
    group: JSON
    max: game_aggregated_fields
    min: game_aggregated_fields
    sum: game_aggregated_fields
    sumDistinct: game_aggregated_fields
}

type game_aggregated_count {
    authors: Int
    description: Int
    id: Int
    status: Int
    students: Int
    title: Int
    video_url: Int
    year: Int
}

type game_aggregated_fields {
    id: Float
    year: Float
}

type game_student {
    game_id(filter: game_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): game
    id: ID
    student_id(filter: student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): student
}

type game_student_aggregated {
    avg: game_student_aggregated_fields
    avgDistinct: game_student_aggregated_fields
    count: game_student_aggregated_count
    countAll: Int
    countDistinct: game_student_aggregated_count
    group: JSON
    max: game_student_aggregated_fields
    min: game_student_aggregated_fields
    sum: game_student_aggregated_fields
    sumDistinct: game_student_aggregated_fields
}

type game_student_aggregated_count {
    game_id: Int
    id: Int
    student_id: Int
}

type game_student_aggregated_fields {
    game_id: Float
    id: Float
    student_id: Float
}

type games_page {
    content: String
    hero_carousel(filter: games_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [games_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type games_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    games_page_id(filter: games_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): games_page
    id: ID
}

type games_page_files_aggregated {
    avg: games_page_files_aggregated_fields
    avgDistinct: games_page_files_aggregated_fields
    count: games_page_files_aggregated_count
    countAll: Int
    countDistinct: games_page_files_aggregated_count
    group: JSON
    max: games_page_files_aggregated_fields
    min: games_page_files_aggregated_fields
    sum: games_page_files_aggregated_fields
    sumDistinct: games_page_files_aggregated_fields
}

type games_page_files_aggregated_count {
    directus_files_id: Int
    games_page_id: Int
    id: Int
}

type games_page_files_aggregated_fields {
    games_page_id: Float
    id: Float
}

type gecomp_page {
    areas: [String]
    content: String
    hero_carousel(filter: gecomp_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gecomp_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    members(filter: gecomp_page_professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [gecomp_page_professor]
    members_func: count_functions
    section1: String
    section2: String
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type gecomp_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    gecomp_page_id(filter: gecomp_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): gecomp_page
    id: ID
}

type gecomp_page_files_aggregated {
    avg: gecomp_page_files_aggregated_fields
    avgDistinct: gecomp_page_files_aggregated_fields
    count: gecomp_page_files_aggregated_count
    countAll: Int
    countDistinct: gecomp_page_files_aggregated_count
    group: JSON
    max: gecomp_page_files_aggregated_fields
    min: gecomp_page_files_aggregated_fields
    sum: gecomp_page_files_aggregated_fields
    sumDistinct: gecomp_page_files_aggregated_fields
}

type gecomp_page_files_aggregated_count {
    directus_files_id: Int
    gecomp_page_id: Int
    id: Int
}

type gecomp_page_files_aggregated_fields {
    gecomp_page_id: Float
    id: Float
}

type gecomp_page_professor {
    gecomp_page_id(filter: gecomp_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): gecomp_page
    id: ID
    professor_id(filter: professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): professor
}

type gecomp_page_professor_aggregated {
    avg: gecomp_page_professor_aggregated_fields
    avgDistinct: gecomp_page_professor_aggregated_fields
    count: gecomp_page_professor_aggregated_count
    countAll: Int
    countDistinct: gecomp_page_professor_aggregated_count
    group: JSON
    max: gecomp_page_professor_aggregated_fields
    min: gecomp_page_professor_aggregated_fields
    sum: gecomp_page_professor_aggregated_fields
    sumDistinct: gecomp_page_professor_aggregated_fields
}

type gecomp_page_professor_aggregated_count {
    gecomp_page_id: Int
    id: Int
    professor_id: Int
}

type gecomp_page_professor_aggregated_fields {
    gecomp_page_id: Float
    id: Float
    professor_id: Float
}

type home_page {
    hero_carousel(filter: home_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [home_page_files]
    hero_carousel_func: count_functions
    id: ID
    secao_feature_1_description: String
    secao_feature_1_link: String
    secao_feature_1_title: String
    secao_feature_2_description: String
    secao_feature_2_link: String
    secao_feature_2_title: String
    secao_feature_3_description: String
    secao_feature_3_link: String
    secao_feature_3_title: String
    secao_feature_display: Boolean
    secao_games_display: Boolean
    secao_games_subtitle: String
    secao_games_title: String
    secao_posts_display: Boolean
    secao_posts_subtitle: String
    secao_posts_title: String
    secao_professores_display: Boolean
    secao_professores_subtitle: String
    secao_professores_title: String
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type home_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    home_page_id(filter: home_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): home_page
    id: ID
}

type home_page_files_aggregated {
    avg: home_page_files_aggregated_fields
    avgDistinct: home_page_files_aggregated_fields
    count: home_page_files_aggregated_count
    countAll: Int
    countDistinct: home_page_files_aggregated_count
    group: JSON
    max: home_page_files_aggregated_fields
    min: home_page_files_aggregated_fields
    sum: home_page_files_aggregated_fields
    sumDistinct: home_page_files_aggregated_fields
}

type home_page_files_aggregated_count {
    directus_files_id: Int
    home_page_id: Int
    id: Int
}

type home_page_files_aggregated_fields {
    home_page_id: Float
    id: Float
}

type link {
    dadw(filter: project_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [project]
    id: ID
    label: String
    url: String
}

type link_aggregated {
    avg: link_aggregated_fields
    avgDistinct: link_aggregated_fields
    count: link_aggregated_count
    countAll: Int
    countDistinct: link_aggregated_count
    group: JSON
    max: link_aggregated_fields
    min: link_aggregated_fields
    sum: link_aggregated_fields
    sumDistinct: link_aggregated_fields
}

type link_aggregated_count {
    id: Int
    label: Int
    url: Int
}

type link_aggregated_fields {
    id: Float
}

type news {
    cover: String
    description: String!
    featured: Boolean
    id: ID
    link: String!
    published_at: Date
    published_at_func: datetime_functions
    title: String!
}

type news_aggregated {
    avg: news_aggregated_fields
    avgDistinct: news_aggregated_fields
    count: news_aggregated_count
    countAll: Int
    countDistinct: news_aggregated_count
    group: JSON
    max: news_aggregated_fields
    min: news_aggregated_fields
    sum: news_aggregated_fields
    sumDistinct: news_aggregated_fields
}

type news_aggregated_count {
    cover: Int
    description: Int
    featured: Int
    id: Int
    link: Int
    published_at: Int
    title: Int
}

type news_aggregated_fields {
    id: Float
}

type professor {
    degree: String
    gecomp: Boolean
    id: ID
    institution: String
    lattes: String
    user(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type professor_aggregated {
    avg: professor_aggregated_fields
    avgDistinct: professor_aggregated_fields
    count: professor_aggregated_count
    countAll: Int
    countDistinct: professor_aggregated_count
    group: JSON
    max: professor_aggregated_fields
    min: professor_aggregated_fields
    sum: professor_aggregated_fields
    sumDistinct: professor_aggregated_fields
}

type professor_aggregated_count {
    degree: Int
    gecomp: Int
    id: Int
    institution: Int
    lattes: Int
    user: Int
}

type professor_aggregated_fields {
    id: Float
}

type professores_page {
    hero_carousel(filter: professores_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [professores_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type professores_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    id: ID
    professores_page_id(filter: professores_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): professores_page
}

type professores_page_files_aggregated {
    avg: professores_page_files_aggregated_fields
    avgDistinct: professores_page_files_aggregated_fields
    count: professores_page_files_aggregated_count
    countAll: Int
    countDistinct: professores_page_files_aggregated_count
    group: JSON
    max: professores_page_files_aggregated_fields
    min: professores_page_files_aggregated_fields
    sum: professores_page_files_aggregated_fields
    sumDistinct: professores_page_files_aggregated_fields
}

type professores_page_files_aggregated_count {
    directus_files_id: Int
    id: Int
    professores_page_id: Int
}

type professores_page_files_aggregated_fields {
    id: Float
    professores_page_id: Float
}

type project {
    cover(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    description: String
    id: ID
    link(filter: link_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): link
    professors(filter: project_professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [project_professor]
    professors_func: count_functions
    status: String!
    students(filter: project_student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [project_student]
    students_func: count_functions
    tags: [String]
    title: String
}

type project_aggregated {
    avg: project_aggregated_fields
    avgDistinct: project_aggregated_fields
    count: project_aggregated_count
    countAll: Int
    countDistinct: project_aggregated_count
    group: JSON
    max: project_aggregated_fields
    min: project_aggregated_fields
    sum: project_aggregated_fields
    sumDistinct: project_aggregated_fields
}

type project_aggregated_count {
    cover: Int
    description: Int
    id: Int
    link: Int
    professors: Int
    status: Int
    students: Int
    tags: Int
    title: Int
}

type project_aggregated_fields {
    id: Float
    link: Float
}

type project_professor {
    id: ID
    professor_id(filter: professor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): professor
    project_id(filter: project_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): project
}

type project_professor_aggregated {
    avg: project_professor_aggregated_fields
    avgDistinct: project_professor_aggregated_fields
    count: project_professor_aggregated_count
    countAll: Int
    countDistinct: project_professor_aggregated_count
    group: JSON
    max: project_professor_aggregated_fields
    min: project_professor_aggregated_fields
    sum: project_professor_aggregated_fields
    sumDistinct: project_professor_aggregated_fields
}

type project_professor_aggregated_count {
    id: Int
    professor_id: Int
    project_id: Int
}

type project_professor_aggregated_fields {
    id: Float
    professor_id: Float
    project_id: Float
}

type project_student {
    id: ID
    project_id(filter: project_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): project
    student_id(filter: student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): student
}

type project_student_aggregated {
    avg: project_student_aggregated_fields
    avgDistinct: project_student_aggregated_fields
    count: project_student_aggregated_count
    countAll: Int
    countDistinct: project_student_aggregated_count
    group: JSON
    max: project_student_aggregated_fields
    min: project_student_aggregated_fields
    sum: project_student_aggregated_fields
    sumDistinct: project_student_aggregated_fields
}

type project_student_aggregated_count {
    id: Int
    project_id: Int
    student_id: Int
}

type project_student_aggregated_fields {
    id: Float
    project_id: Float
    student_id: Float
}

type projetos_page {
    content: String
    date_created: Date
    date_created_func: datetime_functions
    date_updated: Date
    date_updated_func: datetime_functions
    hero_carousel(filter: projetos_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [projetos_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
    status: String!
    user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
    user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type projetos_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    id: ID
    projetos_page_id(filter: projetos_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): projetos_page
}

type projetos_page_files_aggregated {
    avg: projetos_page_files_aggregated_fields
    avgDistinct: projetos_page_files_aggregated_fields
    count: projetos_page_files_aggregated_count
    countAll: Int
    countDistinct: projetos_page_files_aggregated_count
    group: JSON
    max: projetos_page_files_aggregated_fields
    min: projetos_page_files_aggregated_fields
    sum: projetos_page_files_aggregated_fields
    sumDistinct: projetos_page_files_aggregated_fields
}

type projetos_page_files_aggregated_count {
    directus_files_id: Int
    id: Int
    projetos_page_id: Int
}

type projetos_page_files_aggregated_fields {
    id: Float
    projetos_page_id: Float
}

type student {
    id: ID
    user(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type student_aggregated {
    avg: student_aggregated_fields
    avgDistinct: student_aggregated_fields
    count: student_aggregated_count
    countAll: Int
    countDistinct: student_aggregated_count
    group: JSON
    max: student_aggregated_fields
    min: student_aggregated_fields
    sum: student_aggregated_fields
    sumDistinct: student_aggregated_fields
}

type student_aggregated_count {
    id: Int
    user: Int
}

type student_aggregated_fields {
    id: Float
}

type student_directus_users {
    directus_users_id(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
    id: ID
    student_id(filter: student_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): student
}

type student_directus_users_aggregated {
    avg: student_directus_users_aggregated_fields
    avgDistinct: student_directus_users_aggregated_fields
    count: student_directus_users_aggregated_count
    countAll: Int
    countDistinct: student_directus_users_aggregated_count
    group: JSON
    max: student_directus_users_aggregated_fields
    min: student_directus_users_aggregated_fields
    sum: student_directus_users_aggregated_fields
    sumDistinct: student_directus_users_aggregated_fields
}

type student_directus_users_aggregated_count {
    directus_users_id: Int
    id: Int
    student_id: Int
}

type student_directus_users_aggregated_fields {
    id: Float
    student_id: Float
}

type tecnico_integrado_page {
    content: String
    hero_carousel(filter: tecnico_integrado_page_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [tecnico_integrado_page_files]
    hero_carousel_func: count_functions
    hero_title: String
    id: ID
    seo_description: String
    seo_image(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    seo_keywords: [String]
    seo_title: String
}

type tecnico_integrado_page_files {
    directus_files_id(filter: directus_files_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_files
    id: ID
    tecnico_integrado_page_id(filter: tecnico_integrado_page_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): tecnico_integrado_page
}

type tecnico_integrado_page_files_aggregated {
    avg: tecnico_integrado_page_files_aggregated_fields
    avgDistinct: tecnico_integrado_page_files_aggregated_fields
    count: tecnico_integrado_page_files_aggregated_count
    countAll: Int
    countDistinct: tecnico_integrado_page_files_aggregated_count
    group: JSON
    max: tecnico_integrado_page_files_aggregated_fields
    min: tecnico_integrado_page_files_aggregated_fields
    sum: tecnico_integrado_page_files_aggregated_fields
    sumDistinct: tecnico_integrado_page_files_aggregated_fields
}

type tecnico_integrado_page_files_aggregated_count {
    directus_files_id: Int
    id: Int
    tecnico_integrado_page_id: Int
}

type tecnico_integrado_page_files_aggregated_fields {
    id: Float
    tecnico_integrado_page_id: Float
}

"ISO8601 Date values"
scalar Date

"A Float or a String"
scalar GraphQLStringOrFloat

"Hashed string values"
scalar Hash

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input article_article_tags_filter {
    _and: [article_article_tags_filter]
    _or: [article_article_tags_filter]
    article_id: article_filter
    article_tags_id: article_tags_filter
    id: number_filter_operators
}

input article_filter {
    _and: [article_filter]
    _or: [article_filter]
    content: string_filter_operators
    cover: directus_files_filter
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    description: string_filter_operators
    id: number_filter_operators
    sort: number_filter_operators
    status: string_filter_operators
    tags: article_article_tags_filter
    tags_func: count_function_filter_operators
    title: string_filter_operators
    user_created: directus_users_filter
    user_updated: directus_users_filter
}

input article_tags_filter {
    _and: [article_tags_filter]
    _or: [article_tags_filter]
    id: number_filter_operators
    name: string_filter_operators
}

input blog_page_files_filter {
    _and: [blog_page_files_filter]
    _or: [blog_page_files_filter]
    blog_page_id: blog_page_filter
    directus_files_id: directus_files_filter
    id: number_filter_operators
}

input blog_page_filter {
    _and: [blog_page_filter]
    _or: [blog_page_filter]
    hero_carousel: blog_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}

input boolean_filter_operators {
    _eq: Boolean
    _neq: Boolean
    _nnull: Boolean
    _null: Boolean
}

input count_function_filter_operators {
    count: number_filter_operators
}

input date_filter_operators {
    _between: [GraphQLStringOrFloat]
    _eq: String
    _gt: String
    _gte: String
    _lt: String
    _lte: String
    _nbetween: [GraphQLStringOrFloat]
    _neq: String
    _nnull: Boolean
    _null: Boolean
}

input datetime_function_filter_operators {
    day: number_filter_operators
    hour: number_filter_operators
    minute: number_filter_operators
    month: number_filter_operators
    second: number_filter_operators
    week: number_filter_operators
    weekday: number_filter_operators
    year: number_filter_operators
}

input directus_files_filter {
    _and: [directus_files_filter]
    _or: [directus_files_filter]
    charset: string_filter_operators
    description: string_filter_operators
    duration: number_filter_operators
    embed: string_filter_operators
    filename_disk: string_filter_operators
    filename_download: string_filter_operators
    filesize: string_filter_operators
    folder: directus_folders_filter
    height: number_filter_operators
    id: string_filter_operators
    location: string_filter_operators
    metadata: string_filter_operators
    metadata_func: count_function_filter_operators
    modified_by: directus_users_filter
    modified_on: date_filter_operators
    modified_on_func: datetime_function_filter_operators
    storage: string_filter_operators
    tags: string_filter_operators
    tags_func: count_function_filter_operators
    title: string_filter_operators
    type: string_filter_operators
    uploaded_by: directus_users_filter
    uploaded_on: date_filter_operators
    uploaded_on_func: datetime_function_filter_operators
    width: number_filter_operators
}

input directus_folders_filter {
    _and: [directus_folders_filter]
    _or: [directus_folders_filter]
    id: string_filter_operators
    name: string_filter_operators
    parent: directus_folders_filter
}

input directus_users_filter {
    _and: [directus_users_filter]
    _or: [directus_users_filter]
    auth_data: string_filter_operators
    auth_data_func: count_function_filter_operators
    avatar: directus_files_filter
    description: string_filter_operators
    email: string_filter_operators
    email_notifications: boolean_filter_operators
    external_identifier: string_filter_operators
    first_name: string_filter_operators
    id: string_filter_operators
    language: string_filter_operators
    last_access: date_filter_operators
    last_access_func: datetime_function_filter_operators
    last_name: string_filter_operators
    last_page: string_filter_operators
    lattes: string_filter_operators
    location: string_filter_operators
    password: hash_filter_operators
    provider: string_filter_operators
    role: string_filter_operators
    status: string_filter_operators
    tags: string_filter_operators
    tags_func: count_function_filter_operators
    tfa_secret: hash_filter_operators
    theme: string_filter_operators
    title: string_filter_operators
    token: hash_filter_operators
}

input empresa_junior_page_files_filter {
    _and: [empresa_junior_page_files_filter]
    _or: [empresa_junior_page_files_filter]
    directus_files_id: directus_files_filter
    empresa_junior_page_id: empresa_junior_page_filter
    id: number_filter_operators
}

input empresa_junior_page_filter {
    _and: [empresa_junior_page_filter]
    _or: [empresa_junior_page_filter]
    hero_carousel: empresa_junior_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}

input game_filter {
    _and: [game_filter]
    _or: [game_filter]
    authors: string_filter_operators
    description: string_filter_operators
    id: number_filter_operators
    status: string_filter_operators
    students: game_student_filter
    students_func: count_function_filter_operators
    title: string_filter_operators
    video_url: string_filter_operators
    year: number_filter_operators
}

input game_student_filter {
    _and: [game_student_filter]
    _or: [game_student_filter]
    game_id: game_filter
    id: number_filter_operators
    student_id: student_filter
}

input games_page_files_filter {
    _and: [games_page_files_filter]
    _or: [games_page_files_filter]
    directus_files_id: directus_files_filter
    games_page_id: games_page_filter
    id: number_filter_operators
}

input games_page_filter {
    _and: [games_page_filter]
    _or: [games_page_filter]
    content: string_filter_operators
    hero_carousel: games_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}

input gecomp_page_files_filter {
    _and: [gecomp_page_files_filter]
    _or: [gecomp_page_files_filter]
    directus_files_id: directus_files_filter
    gecomp_page_id: gecomp_page_filter
    id: number_filter_operators
}

input gecomp_page_filter {
    _and: [gecomp_page_filter]
    _or: [gecomp_page_filter]
    areas: string_filter_operators
    content: string_filter_operators
    hero_carousel: gecomp_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    members: gecomp_page_professor_filter
    members_func: count_function_filter_operators
    section1: string_filter_operators
    section2: string_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}

input gecomp_page_professor_filter {
    _and: [gecomp_page_professor_filter]
    _or: [gecomp_page_professor_filter]
    gecomp_page_id: gecomp_page_filter
    id: number_filter_operators
    professor_id: professor_filter
}

input hash_filter_operators {
    _empty: Boolean
    _nempty: Boolean
    _nnull: Boolean
    _null: Boolean
}

input home_page_files_filter {
    _and: [home_page_files_filter]
    _or: [home_page_files_filter]
    directus_files_id: directus_files_filter
    home_page_id: home_page_filter
    id: number_filter_operators
}

input home_page_filter {
    _and: [home_page_filter]
    _or: [home_page_filter]
    hero_carousel: home_page_files_filter
    hero_carousel_func: count_function_filter_operators
    id: number_filter_operators
    secao_feature_1_description: string_filter_operators
    secao_feature_1_link: string_filter_operators
    secao_feature_1_title: string_filter_operators
    secao_feature_2_description: string_filter_operators
    secao_feature_2_link: string_filter_operators
    secao_feature_2_title: string_filter_operators
    secao_feature_3_description: string_filter_operators
    secao_feature_3_link: string_filter_operators
    secao_feature_3_title: string_filter_operators
    secao_feature_display: boolean_filter_operators
    secao_games_display: boolean_filter_operators
    secao_games_subtitle: string_filter_operators
    secao_games_title: string_filter_operators
    secao_posts_display: boolean_filter_operators
    secao_posts_subtitle: string_filter_operators
    secao_posts_title: string_filter_operators
    secao_professores_display: boolean_filter_operators
    secao_professores_subtitle: string_filter_operators
    secao_professores_title: string_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}

input link_filter {
    _and: [link_filter]
    _or: [link_filter]
    dadw: project_filter
    id: number_filter_operators
    label: string_filter_operators
    url: string_filter_operators
}

input news_filter {
    _and: [news_filter]
    _or: [news_filter]
    cover: string_filter_operators
    description: string_filter_operators
    featured: boolean_filter_operators
    id: number_filter_operators
    link: string_filter_operators
    published_at: date_filter_operators
    published_at_func: datetime_function_filter_operators
    title: string_filter_operators
}

input number_filter_operators {
    _between: [GraphQLStringOrFloat]
    _eq: GraphQLStringOrFloat
    _gt: GraphQLStringOrFloat
    _gte: GraphQLStringOrFloat
    _in: [GraphQLStringOrFloat]
    _lt: GraphQLStringOrFloat
    _lte: GraphQLStringOrFloat
    _nbetween: [GraphQLStringOrFloat]
    _neq: GraphQLStringOrFloat
    _nin: [GraphQLStringOrFloat]
    _nnull: Boolean
    _null: Boolean
}

input professor_filter {
    _and: [professor_filter]
    _or: [professor_filter]
    degree: string_filter_operators
    gecomp: boolean_filter_operators
    id: number_filter_operators
    institution: string_filter_operators
    lattes: string_filter_operators
    user: directus_users_filter
}

input professores_page_files_filter {
    _and: [professores_page_files_filter]
    _or: [professores_page_files_filter]
    directus_files_id: directus_files_filter
    id: number_filter_operators
    professores_page_id: professores_page_filter
}

input professores_page_filter {
    _and: [professores_page_filter]
    _or: [professores_page_filter]
    hero_carousel: professores_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}

input project_filter {
    _and: [project_filter]
    _or: [project_filter]
    cover: directus_files_filter
    description: string_filter_operators
    id: number_filter_operators
    link: link_filter
    professors: project_professor_filter
    professors_func: count_function_filter_operators
    status: string_filter_operators
    students: project_student_filter
    students_func: count_function_filter_operators
    tags: string_filter_operators
    title: string_filter_operators
}

input project_professor_filter {
    _and: [project_professor_filter]
    _or: [project_professor_filter]
    id: number_filter_operators
    professor_id: professor_filter
    project_id: project_filter
}

input project_student_filter {
    _and: [project_student_filter]
    _or: [project_student_filter]
    id: number_filter_operators
    project_id: project_filter
    student_id: student_filter
}

input projetos_page_files_filter {
    _and: [projetos_page_files_filter]
    _or: [projetos_page_files_filter]
    directus_files_id: directus_files_filter
    id: number_filter_operators
    projetos_page_id: projetos_page_filter
}

input projetos_page_filter {
    _and: [projetos_page_filter]
    _or: [projetos_page_filter]
    content: string_filter_operators
    date_created: date_filter_operators
    date_created_func: datetime_function_filter_operators
    date_updated: date_filter_operators
    date_updated_func: datetime_function_filter_operators
    hero_carousel: projetos_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
    status: string_filter_operators
    user_created: directus_users_filter
    user_updated: directus_users_filter
}

input string_filter_operators {
    _contains: String
    _empty: Boolean
    _ends_with: String
    _eq: String
    _in: [String]
    _ncontains: String
    _nempty: Boolean
    _nends_with: String
    _neq: String
    _nin: [String]
    _nnull: Boolean
    _nstarts_with: String
    _null: Boolean
    _starts_with: String
}

input student_directus_users_filter {
    _and: [student_directus_users_filter]
    _or: [student_directus_users_filter]
    directus_users_id: directus_users_filter
    id: number_filter_operators
    student_id: student_filter
}

input student_filter {
    _and: [student_filter]
    _or: [student_filter]
    id: number_filter_operators
    user: directus_users_filter
}

input tecnico_integrado_page_files_filter {
    _and: [tecnico_integrado_page_files_filter]
    _or: [tecnico_integrado_page_files_filter]
    directus_files_id: directus_files_filter
    id: number_filter_operators
    tecnico_integrado_page_id: tecnico_integrado_page_filter
}

input tecnico_integrado_page_filter {
    _and: [tecnico_integrado_page_filter]
    _or: [tecnico_integrado_page_filter]
    content: string_filter_operators
    hero_carousel: tecnico_integrado_page_files_filter
    hero_carousel_func: count_function_filter_operators
    hero_title: string_filter_operators
    id: number_filter_operators
    seo_description: string_filter_operators
    seo_image: directus_files_filter
    seo_keywords: string_filter_operators
    seo_title: string_filter_operators
}
